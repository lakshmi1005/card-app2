{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lakshmi.ch\\\\Desktop\\\\card-app2\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CardDeck from './components/CardDeck';\nimport Controls from './components/Controls';\nimport StatusMessage from './components/StatusMessage';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\nfunction App() {\n  _s();\n  const [deck, setDeck] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [algorithm, setAlgorithm] = useState('');\n  useEffect(() => {\n    fetchDeck();\n  }, []);\n  const fetchDeck = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/api/deck`);\n      setDeck(response.data.deck);\n      setMessage(response.data.message);\n    } catch (error) {\n      setMessage('Error fetching deck');\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const shuffleDeck = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/api/shuffle`);\n      setDeck(response.data.deck);\n      setMessage(response.data.message);\n      setAlgorithm('');\n    } catch (error) {\n      setMessage('Error shuffling deck');\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const sortDeck = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/api/sort`);\n      setDeck(response.data.deck);\n      setMessage(response.data.message);\n      setAlgorithm(response.data.algorithm);\n    } catch (error) {\n      setMessage('Error sorting deck');\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetDeck = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/api/reset`);\n      setDeck(response.data.deck);\n      setMessage(response.data.message);\n      setAlgorithm('');\n    } catch (error) {\n      setMessage('Error resetting deck');\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Card Shuffling & Sorting Application\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatusMessage, {\n        message: message,\n        algorithm: algorithm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(Controls, {\n        onShuffle: shuffleDeck,\n        onSort: sortDeck,\n        onReset: resetDeck,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardDeck, {\n        deck: deck,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"weOC0k9HzF5mnzjL3+hxORU39Lc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","CardDeck","Controls","StatusMessage","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","App","_s","deck","setDeck","loading","setLoading","message","setMessage","algorithm","setAlgorithm","fetchDeck","response","get","data","error","console","shuffleDeck","post","sortDeck","resetDeck","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onShuffle","onSort","onReset","_c","$RefreshReg$"],"sources":["C:/Users/Lakshmi.ch/Desktop/card-app2/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CardDeck from './components/CardDeck';\r\nimport Controls from './components/Controls';\r\nimport StatusMessage from './components/StatusMessage';\r\nimport './App.css';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\r\n\r\nfunction App() {\r\n  const [deck, setDeck] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [algorithm, setAlgorithm] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchDeck();\r\n  }, []);\r\n\r\n  const fetchDeck = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.get(`${API_BASE_URL}/api/deck`);\r\n      setDeck(response.data.deck);\r\n      setMessage(response.data.message);\r\n    } catch (error) {\r\n      setMessage('Error fetching deck');\r\n      console.error('Error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const shuffleDeck = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(`${API_BASE_URL}/api/shuffle`);\r\n      setDeck(response.data.deck);\r\n      setMessage(response.data.message);\r\n      setAlgorithm('');\r\n    } catch (error) {\r\n      setMessage('Error shuffling deck');\r\n      console.error('Error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const sortDeck = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(`${API_BASE_URL}/api/sort`);\r\n      setDeck(response.data.deck);\r\n      setMessage(response.data.message);\r\n      setAlgorithm(response.data.algorithm);\r\n    } catch (error) {\r\n      setMessage('Error sorting deck');\r\n      console.error('Error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const resetDeck = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(`${API_BASE_URL}/api/reset`);\r\n      setDeck(response.data.deck);\r\n      setMessage(response.data.message);\r\n      setAlgorithm('');\r\n    } catch (error) {\r\n      setMessage('Error resetting deck');\r\n      console.error('Error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Card Shuffling & Sorting Application</h1>\r\n        <StatusMessage message={message} algorithm={algorithm} />\r\n      </header>\r\n      \r\n      <main className=\"App-main\">\r\n        <Controls\r\n          onShuffle={shuffleDeck}\r\n          onSort={sortDeck}\r\n          onReset={resetDeck}\r\n          loading={loading}\r\n        />\r\n        \r\n        <CardDeck deck={deck} loading={loading} />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}